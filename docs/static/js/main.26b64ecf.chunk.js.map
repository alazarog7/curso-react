{"version":3,"sources":["Components/AddCategory.js","Helpers/GetGifs.js","Components/GifGridItem.js","Components/GifGrid.js","Hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategory","useState","inputValue","setinputValue","onSubmit","e","preventDefault","length","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","className","src","alt","width","height","GifGrid","loading","state","setstate","useEffect","then","imgs","catch","useFetchGifs","img","GifExpertApp","v","c","ReactDOM","render","document","getElementById"],"mappings":"mMAmCeA,EAjCK,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,YAAgB,EAEEC,mBAAS,IAFX,mBAE3BC,EAF2B,KAEfC,EAFe,KAgBlC,OACI,uBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAS,GACnBP,EAAY,CAACE,KAMjB,UACG,6BAAKA,IACL,uBACKM,KAAK,OACLC,MAAOP,EACPQ,SAlBc,SAACL,GACxBF,EAAcE,EAAEM,OAAOF,c,+BCPjBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,0FAC6EC,UAAUH,GADvF,+BAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAK,SAAAjB,GACpB,MAAQ,CACKkB,GAAIlB,EAAEkB,GACNC,MAAOnB,EAAEmB,MACTT,IAAKV,EAAEoB,OAAOC,iBAAiBX,QAR5B,kBAYbM,GAZa,4CAAH,sDCEPM,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOT,EAAS,EAATA,IACpC,OACI,sBAAKa,UAAU,2DAAf,UACI,qBAAKC,IAAKd,EAAKe,IAAKN,EAAOO,MAAM,QAAQC,OAAO,UAChD,4BAAIR,QCgBDS,EAlBC,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAAc,ECDJ,SAAEA,GAAe,IAAD,EACdZ,mBAAS,CAC/BmB,KAAK,GACLc,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAoBxC,OAdAC,qBAAU,WACNzB,EAAQC,GAAUyB,MAAK,SAACC,GACnBH,EAAS,CACLhB,KAAMmB,EACNL,SAAS,OAEdM,OAAM,WACNJ,EAAS,CACLhB,KAAM,GACNc,SAAS,SAGlB,CAACrB,IAEGsB,EDhByBM,CAAa5B,GAAhCY,EAHe,EAGpBL,KAAac,EAHO,EAGPA,QAErB,OACI,qCACI,oBAAIN,UAAU,sBAAd,SAAqCf,IACpCqB,GAAW,eACZ,qBAAKN,UAAU,YAAf,SAEQH,EAAOH,KAAK,SAAAoB,GAAG,OAAI,cAAC,EAAD,eAA8BA,GAAZA,EAAInB,aEa9CoB,EAxBM,WAAK,IAAD,EAGW1C,mBAAS,CAAC,OAHrB,mBAGdY,EAHc,KAGJb,EAHI,KASrB,OACI,qCAEI,8CACA,uBACA,cAAC,EAAD,CAAaA,YATD,SAAC4C,GACjB5C,EAAY,CAAC4C,GAAF,mBAAQ/B,QASf,6BAEYA,EAASS,KAAI,SAACuB,GAAD,OAAK,cAAC,EAAD,CAAiBhC,SAAUgC,GAAbA,Y,MCjBxDC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.26b64ecf.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropType from 'prop-types';\nconst AddCategory = ({setcategory})=> {\n    \n    const [inputValue, setinputValue] = useState(\"\");\n\n    const handleInputChange = (e)=>{\n       setinputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) =>{\n        e.preventDefault();\n        if(inputValue.length > 0){\n            setcategory([inputValue])\n        }\n        \n    } \n\n    return (\n        <form onSubmit={handleSubmit}>\n           <h1>{inputValue}</h1>\n           <input \n                type=\"text\" \n                value={inputValue}\n                onChange = {handleInputChange} \n           />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setcategory: PropType.func.isRequired \n}\n\n\nexport default AddCategory;","export const getGifs = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=e1F8FYqV6yxP9gwAXkCkewVA0HGhSCaI&q=${ encodeURI(category) }&limit=10&offset=0`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    const gifs = data.map( e => {\n       return  {\n                    id: e.id,\n                    title: e.title,\n                    url: e.images.downsized_medium.url\n                };\n    })\n\n   return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__bounce animate__delay-2s\">\n            <img src={url} alt={title} width=\"100px\" height=\"100px\"/>\n            <p>{title}</p>\n            \n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport { useFetchGifs } from '../Hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nconst GifGrid = ({category}) => {\n\n    //const [images, setImages] = useState([]);\n    const { data:images, loading} = useFetchGifs(category);\n   \n    return (\n        <>\n            <h3 className=\"animate__zoomInLeft\">{category}</h3>\n            {loading && 'Cargando ...'}\n            <div className=\"card-grid\">\n                {\n                    images.map( img => <GifGridItem key={img.id} {...img}/> )\n                }\n            </div>\n        </>\n    );\n};\n\nexport default GifGrid;\n\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../Helpers/GetGifs\";\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setstate] = useState({\n        data:[],\n        loading: true\n    });\n\n    useEffect(()=>{\n        getGifs(category).then((imgs)=> {\n             setstate({\n                 data: imgs,\n                 loading: false\n             });\n         }).catch(()=>{\n            setstate({\n                data: [],\n                loading: true\n            });\n         })\n     },[category]);\n\n    return state;\n\n};","import React, { useState } from 'react'\nimport AddCategory from './Components/AddCategory';\nimport GifGrid from './Components/GifGrid';\n\nconst GifExpertApp = ()=>{\n\n\n    const [category, setcategory] = useState([\"OK\"]);\n\n    const addCategory = (v)=>{\n        setcategory([v, ...category ]);\n    };\n\n    return (\n        <>\n            \n            <h2>GifExpertApp</h2>\n            <hr/>  \n            <AddCategory setcategory = {addCategory} />\n            <ol>\n                    {\n                        category.map((c)=><GifGrid key={c} category={c} />)\n                    }\n            </ol>\n        </>\n    );\n};\n\nexport default GifExpertApp;","import ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}